
// This code has been generated by the C2W code generator.
// Do not edit manually!

package GLDTestFederation;

import java.util.HashSet;
import java.util.Set;

import hla.rti.*;

import c2w.hla.*;

/**
* The F1_house_A8 class implements the F1_house_A8 object in the
* GLDTestFederation simulation.
*/
public class F1_house_A8 extends ObjectRoot {

	/**
	* Default constructor -- creates an instance of the F1_house_A8 object
	* class with default attribute values.
	*/
	public F1_house_A8() { }

	
	
	private static int _number_of_stories_handle;
	
	
	/**
	* Returns the handle (RTI assigned) of the "number_of_stories" attribute of
	* its containing object class.
	*
	* @return the handle (RTI assigned) of the "number_of_stories" attribute
	*/
	public static int get_number_of_stories_handle() { return _number_of_stories_handle; }
	
	
	
	private static boolean _isInitialized = false;

	private static int _handle;

	/**
	* Returns the handle (RTI assigned) of the F1_house_A8 object class.
	* Note: As this is a static method, it is NOT polymorphic, and so, if called on
	* a reference will return the handle of the class pertaining to the reference,\
	* rather than the handle of the class for the instance referred to by the reference.
	* For the polymorphic version of this method, use {@link #getClassHandle()}.
	*/
	public static int get_handle() { return _handle; }

	/**
	* Returns the fully-qualified (dot-delimited) name of the F1_house_A8
	* object class.
	* Note: As this is a static method, it is NOT polymorphic, and so, if called on
	* a reference will return the name of the class pertaining to the reference,\
	* rather than the name of the class for the instance referred to by the reference.
	* For the polymorphic version of this method, use {@link #getClassName()}.
	*/
	public static String get_class_name() { return "ObjectRoot.F1_house_A8"; }

	/**
	* Returns the simple name (the last name in the dot-delimited fully-qualified
	* class name) of the F1_house_A8 object class.
	*/
	public static String get_simple_class_name() { return "F1_house_A8"; }

	private static Set< String > _datamemberNames = new HashSet< String >();
	private static Set< String > _allDatamemberNames = new HashSet< String >();

	/**
	* Returns a set containing the names of all of the non-hidden attributes in the
	* F1_house_A8 object class.
	* Note: As this is a static method, it is NOT polymorphic, and so, if called on
	* a reference will return a set of parameter names pertaining to the reference,\
	* rather than the parameter names of the class for the instance referred to by
	* the reference.  For the polymorphic version of this method, use
	* {@link #getAttributeNames()}.
	*/
	public static Set< String > get_attribute_names() {
		return new HashSet< String >( _datamemberNames );
	}


	/**
	* Returns a set containing the names of all of the attributes in the
	* F1_house_A8 object class.
	* Note: As this is a static method, it is NOT polymorphic, and so, if called on
	* a reference will return a set of parameter names pertaining to the reference,\
	* rather than the parameter names of the class for the instance referred to by
	* the reference.  For the polymorphic version of this method, use
	* {@link #getAttributeNames()}.
	*/
	public static Set< String > get_all_attribute_names() {
		return new HashSet< String >( _allDatamemberNames );
	}


	
	private static AttributeHandleSet _publishedAttributeHandleSet;
	private static Set< String > _publishAttributeNameSet = new HashSet< String >();

	private static AttributeHandleSet _subscribedAttributeHandleSet; 
	private static Set< String > _subscribeAttributeNameSet = new HashSet< String >();

	

	static {
		_classNameSet.add( "ObjectRoot.F1_house_A8" );
		_classNameClassMap.put( "ObjectRoot.F1_house_A8", F1_house_A8.class );
		
		_datamemberClassNameSetMap.put( "ObjectRoot.F1_house_A8", _datamemberNames );
		_allDatamemberClassNameSetMap.put( "ObjectRoot.F1_house_A8", _allDatamemberNames );

		
		
		_datamemberNames.add( "number_of_stories" );
		
		
		_allDatamemberNames.add( "number_of_stories" );
		
		
		_datamemberTypeMap.put( "number_of_stories", "double" );
	

		_classNamePublishAttributeNameMap.put( "ObjectRoot.F1_house_A8", _publishAttributeNameSet );
		_publishedAttributeHandleSet = _factory.createAttributeHandleSet();
		_classNamePublishedAttributeMap.put( "ObjectRoot.F1_house_A8", _publishedAttributeHandleSet );

		_classNameSubscribeAttributeNameMap.put( "ObjectRoot.F1_house_A8", _subscribeAttributeNameSet );
		_subscribedAttributeHandleSet = _factory.createAttributeHandleSet();
		_classNameSubscribedAttributeMap.put( "ObjectRoot.F1_house_A8", _subscribedAttributeHandleSet );
	

	}


	private static String initErrorMessage = "Error:  ObjectRoot.F1_house_A8:  could not initialize:  ";
	protected static void init( RTIambassador rti ) {
		if ( _isInitialized ) return;
		_isInitialized = true;
		
		ObjectRoot.init( rti );
		
		boolean isNotInitialized = true;
		while( isNotInitialized ) {
			try {
				_handle = rti.getObjectClassHandle( "ObjectRoot.F1_house_A8" );
				isNotInitialized = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( initErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;				
			} catch ( NameNotFound n ) {
				System.err.println( initErrorMessage + "Name Not Found" );
				n.printStackTrace();
				return;				
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }					
			}
		}

		_classNameHandleMap.put( "ObjectRoot.F1_house_A8", get_handle() );
		_classHandleNameMap.put( get_handle(), "ObjectRoot.F1_house_A8" );
		_classHandleSimpleNameMap.put( get_handle(), "F1_house_A8" );

		
		isNotInitialized = true;
		while( isNotInitialized ) {
			try {
							
				_number_of_stories_handle = rti.getAttributeHandle( "number_of_stories", get_handle() );
				isNotInitialized = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( initErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;				
			} catch ( ObjectClassNotDefined i ) {
				System.err.println( initErrorMessage + "Object Class Not Defined" );
				i.printStackTrace();
				return;				
			} catch ( NameNotFound n ) {
				System.err.println( initErrorMessage + "Name Not Found" );
				n.printStackTrace();
				return;				
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }					
			}
		}
			
			
		_datamemberNameHandleMap.put( "ObjectRoot.F1_house_A8,number_of_stories", get_number_of_stories_handle() );
			
			
		_datamemberHandleNameMap.put( get_number_of_stories_handle(), "number_of_stories" );
		
	}


	private static boolean _isPublished = false;
	private static String publishErrorMessage = "Error:  ObjectRoot.F1_house_A8:  could not publish:  ";

	/**
	* Publishes the F1_house_A8 object class for a federate.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public static void publish( RTIambassador rti ) {
		if ( _isPublished ) return;
		
		init( rti );

		
		_publishedAttributeHandleSet.empty();
		for( String attributeName : _publishAttributeNameSet ) {
			try {
				_publishedAttributeHandleSet.add(  _datamemberNameHandleMap.get( "ObjectRoot.F1_house_A8," + attributeName )  );
			} catch ( Exception e ) {
				System.err.println( publishErrorMessage + "Could not publish \"" + attributeName + "\" attribute." );
			}
		}
	

		synchronized( rti ) {
			boolean isNotPublished = true;
			while( isNotPublished ) {
				try {
					rti.publishObjectClass( get_handle(), _publishedAttributeHandleSet );
					isNotPublished = false;
				} catch ( FederateNotExecutionMember f ) {
					System.err.println( publishErrorMessage + "Federate Not Execution Member" );
					f.printStackTrace();
					return;
				} catch ( ObjectClassNotDefined i ) {
					System.err.println( publishErrorMessage + "Object Class Not Defined" );
					i.printStackTrace();
					return;
				} catch ( Exception e ) {
					e.printStackTrace();
					try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
				}
			}
		}
		
		_isPublished = true;
	}

	private static String unpublishErrorMessage = "Error:  ObjectRoot.F1_house_A8:  could not unpublish:  ";
	/**
	* Unpublishes the F1_house_A8 object class for a federate.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public static void unpublish( RTIambassador rti ) {
		if ( !_isPublished ) return;
		
		init( rti );
		synchronized( rti ) {
			boolean isNotUnpublished = true;
			while( isNotUnpublished ) {
				try {
					rti.unpublishObjectClass( get_handle() );
					isNotUnpublished = false;
				} catch ( FederateNotExecutionMember f ) {
					System.err.println( unpublishErrorMessage + "Federate Not Execution Member" );
					f.printStackTrace();
					return;
				} catch ( ObjectClassNotDefined i ) {
					System.err.println( unpublishErrorMessage + "Object Class Not Defined" );
					i.printStackTrace();
					return;
				} catch ( ObjectClassNotPublished i ) {
					System.err.println( unpublishErrorMessage + "Object Class Not Published" );
					i.printStackTrace();
					return;
				} catch ( Exception e ) {
					e.printStackTrace();
					try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
				}
			}
		}
		
		_isPublished = false;
	}

	private static boolean _isSubscribed = false;
	private static String subscribeErrorMessage = "Error:  ObjectRoot.F1_house_A8:  could not subscribe:  ";
	/**
	* Subscribes a federate to the F1_house_A8 object class.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public static void subscribe( RTIambassador rti ) {
		if ( _isSubscribed ) return;
		
		init( rti );
		
		_subscribedAttributeHandleSet.empty();
		for( String attributeName : _subscribeAttributeNameSet ) {
			try {
				_subscribedAttributeHandleSet.add(  _datamemberNameHandleMap.get( "ObjectRoot.F1_house_A8," + attributeName )  );
			} catch ( Exception e ) {
				System.err.println( subscribeErrorMessage + "Could not subscribe to \"" + attributeName + "\" attribute." );
			}
		}
	
		
		synchronized( rti ) {
			boolean isNotSubscribed = true;
			while( isNotSubscribed ) {
				try {
					rti.subscribeObjectClassAttributes( get_handle(), _subscribedAttributeHandleSet );
					isNotSubscribed = false;
				} catch ( FederateNotExecutionMember f ) {
					System.err.println( subscribeErrorMessage + "Federate Not Execution Member" );
					f.printStackTrace();
					return;
				} catch ( ObjectClassNotDefined i ) {
					System.err.println( subscribeErrorMessage + "Object Class Not Defined" );
					i.printStackTrace();
					return;
				} catch ( Exception e ) {
					e.printStackTrace();
					try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
				}
			}
		}
		
		_isSubscribed = true;
	}

	private static String unsubscribeErrorMessage = "Error:  ObjectRoot.F1_house_A8:  could not unsubscribe:  ";
	/**
	* Unsubscribes a federate from the F1_house_A8 object class.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public static void unsubscribe( RTIambassador rti ) {
		if ( !_isSubscribed ) return;

		init( rti );
		synchronized( rti ) {
			boolean isNotUnsubscribed = true;
			while( isNotUnsubscribed ) {
				try {
					rti.unsubscribeObjectClass( get_handle() );
					isNotUnsubscribed = false;
				} catch ( FederateNotExecutionMember f ) {
					System.err.println( unsubscribeErrorMessage + "Federate Not Execution Member" );
					f.printStackTrace();
					return;
				} catch ( ObjectClassNotDefined i ) {
					System.err.println( unsubscribeErrorMessage + "Object Class Not Defined" );
					i.printStackTrace();
					return;
				} catch ( ObjectClassNotSubscribed i ) {
					System.err.println( unsubscribeErrorMessage + "Object Class Not Subscribed" );
					i.printStackTrace();
					return;
				} catch ( Exception e ) {
					e.printStackTrace();
					try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
				}
			}
		}
		
		_isSubscribed = false;
	}

	/**
	* Return true if "handle" is equal to the handle (RTI assigned) of this class
	* (that is, the F1_house_A8 object class).
	*
	* @param handle handle to compare to the value of the handle (RTI assigned) of
	* this class (the F1_house_A8 object class).
	* @return "true" if "handle" matches the value of the handle of this class
	* (that is, the F1_house_A8 object class).
	*/
	public static boolean match( int handle ) { return handle == get_handle(); }

	/**
	* Returns the handle (RTI assigned) of this instance's object class .
	* 
	* @return the handle (RTI assigned) if this instance's object class
	*/
	public int getClassHandle() { return get_handle(); }

	/**
	* Returns the fully-qualified (dot-delimited) name of this instance's object class.
	* 
	* @return the fully-qualified (dot-delimited) name of this instance's object class
	*/
	public String getClassName() { return get_class_name(); }

	/**
	* Returns the simple name (last name in its fully-qualified dot-delimited name)
	* of this instance's object class.
	* 
	* @return the simple name of this instance's object class 
	*/
	public String getSimpleClassName() { return get_simple_class_name(); }

	/**
	* Returns a set containing the names of all of the non-hiddenattributes of an
	* object class instance.
	*
	* @return set containing the names of all of the attributes of an
	* object class instance
	*/
	public Set< String > getAttributeNames() { return get_attribute_names(); }

	/**
	* Returns a set containing the names of all of the attributes of an
	* object class instance.
	*
	* @return set containing the names of all of the attributes of an
	* object class instance
	*/
	public Set< String > getAllAttributeNames() { return get_all_attribute_names(); }

	/**
	* Publishes the object class of this instance of the class for a federate.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public void publishObject( RTIambassador rti ) { publish( rti ); }

	/**
	* Unpublishes the object class of this instance of this class for a federate.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public void unpublishObject( RTIambassador rti ) { unpublish( rti ); }

	/**
	* Subscribes a federate to the object class of this instance of this class.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public void subscribeObject( RTIambassador rti ) { subscribe( rti ); }

	/**
	* Unsubscribes a federate from the object class of this instance of this class.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public void unsubscribeObject( RTIambassador rti ) { unsubscribe( rti ); }

	
	/**
	* Returns a data structure containing the handles of all attributes for this object
	* class that are currently marked for subscription.  To actually subscribe to these
	* attributes, a federate must call <objectclassname>.subscribe( RTIambassador rti ).
	*
	* @return data structure containing the handles of all attributes for this object
	* class that are currently marked for subscription
	*/
	public AttributeHandleSet getSubscribedAttributeHandleSet() { return _subscribedAttributeHandleSet; }
	

	public String toString() {
		return "F1_house_A8("
			
			
			+ "number_of_stories:" + get_number_of_stories()
			+ ")";
	}
	



	
	
	/**
	* Publishes the "number_of_stories" attribute of the attribute's containing object
	* class for a federate.
	* Note:  This method only marks the "number_of_stories" attribute for publication.
	* To actually publish the attribute, the federate must (re)publish its containing
	* object class.
	* (using <objectClassName>.publish( RTIambassador rti ) ).
	*/
	public static void publish_number_of_stories() {
		_publishAttributeNameSet.add( "number_of_stories" );
	}

	/**
	* Unpublishes the "number_of_stories" attribute of the attribute's containing object
	* class for a federate.
	* Note:  This method only marks the "number_of_stories" attribute for unpublication.
	* To actually publish the attribute, the federate must (re)publish its containing
	* object class.
	* (using <objectClassName>.publish( RTIambassador rti ) ).
	*/
	public static void unpublish_number_of_stories() {
		_publishAttributeNameSet.remove( "number_of_stories" );
	}
	
	/**
	* Subscribes a federate to the "number_of_stories" attribute of the attribute's
	* containing object class.
	* Note:  This method only marks the "number_of_stories" attribute for subscription.
	* To actually subscribe to the attribute, the federate must (re)subscribe to its
	* containing object class.
	* (using <objectClassName>.subscribe( RTIambassador rti ) ).
	*/
	public static void subscribe_number_of_stories() {
		_subscribeAttributeNameSet.add( "number_of_stories" );
	}

	/**
	* Unsubscribes a federate from the "number_of_stories" attribute of the attribute's
	* containing object class.
	* Note:  This method only marks the "number_of_stories" attribute for unsubscription.
	* To actually unsubscribe to the attribute, the federate must (re)subscribe to its
	* containing object class.
	* (using <objectClassName>.subscribe( RTIambassador rti ) ).
	*/
	public static void unsubscribe_number_of_stories() {
		_subscribeAttributeNameSet.remove( "number_of_stories" );
	}
	

	
	
	private Attribute< Double > _number_of_stories =
 		new Attribute< Double >(  new Double( 0 )  );
	
	/**
	* Set the value of the "number_of_stories" attribute to "value" for this object.
	*
	* @param value the new value for the "number_of_stories" attribute
	*/
	public void set_number_of_stories( double value ) {
		_number_of_stories.setValue( value );
		_number_of_stories.setTime( getTime() );
	}
	
	/**
	* Returns the value of the "number_of_stories" attribute of this object.
	*
	* @return the value of the "number_of_stories" attribute
	*/
	public double get_number_of_stories() {
		return _number_of_stories.getValue();
	}
	
	/**
	* Returns the current timestamp of the "number_of_stories" attribute of this object.
	* 
	* @return the current timestamp of the "number_of_stories" attribute
	*/
	public double get_number_of_stories_time() {
		return _number_of_stories.getTime();
	}
	


	protected F1_house_A8( ReflectedAttributes datamemberMap, boolean initFlag ) {
		super( datamemberMap, false );
		if ( initFlag ) setAttributes( datamemberMap );
	}
	
	protected F1_house_A8( ReflectedAttributes datamemberMap, LogicalTime logicalTime, boolean initFlag ) {
		super( datamemberMap, logicalTime, false );
		if ( initFlag ) setAttributes( datamemberMap );
	}


	/**
	* Creates an instance of the F1_house_A8 object class, using
	* "datamemberMap" to initialize its attribute values.
	* "datamemberMap" is usually acquired as an argument to an RTI federate
	* callback method, such as "receiveInteraction".
	*
	* @param datamemberMap data structure containing initial values for the
	* attributes of this new F1_house_A8 object class instance
	*/
	public F1_house_A8( ReflectedAttributes datamemberMap ) {
		this( datamemberMap, true );
	}
	
	/**
	* Like {@link #F1_house_A8( ReflectedAttributes datamemberMap )}, except this
	* new F1_house_A8 object class instance is given a timestamp of
	* "logicalTime".
	*
	* @param datamemberMap data structure containing initial values for the
	* attributes of this new F1_house_A8 object class instance
	* @param logicalTime timestamp for this new F1_house_A8 object class
	* instance
	*/
	public F1_house_A8( ReflectedAttributes datamemberMap, LogicalTime logicalTime ) {
		this( datamemberMap, logicalTime, true );
	}

	/**
	* Creates a new F1_house_A8 object class instance that is a duplicate
	* of the instance referred to by F1_house_A8_var.
	*
	* @param F1_house_A8_var F1_house_A8 object class instance of which
	* this newly created F1_house_A8 object class instance will be a
	* duplicate
	*/
	public F1_house_A8( F1_house_A8 F1_house_A8_var ) {
		super( F1_house_A8_var );
		
		
		set_number_of_stories( F1_house_A8_var.get_number_of_stories() );
	}


	/**
	* Returns the value of the attribute whose name is "datamemberName"
	* for this object.
	*
	* @param datamemberName name of attribute whose value is to be
	* returned
	* @return value of the attribute whose name is "datamemberName"
	* for this object
	*/
	public Object getAttribute( String datamemberName ) {
		
		
		
		if (  "number_of_stories".equals( datamemberName )  ) return new Double( get_number_of_stories() );
		else return super.getAttribute( datamemberName );
	}
	
	/**
	* Returns the value of the attribute whose handle (RTI assigned)
	* is "datamemberHandle" for this object.
	*
	* @param datamemberHandle handle (RTI assigned) of attribute whose
	* value is to be returned
	* @return value of the attribute whose handle (RTI assigned) is
	* "datamemberHandle" for this object
	*/
	public Object getAttribute( int datamemberHandle ) {
		
				
		
		if ( get_number_of_stories_handle() == datamemberHandle ) return new Double( get_number_of_stories() );
		else return super.getAttribute( datamemberHandle );
	}
	
	protected boolean setAttributeAux( int param_handle, String val ) {
		boolean retval = true;		
		
			
		
		if ( param_handle == get_number_of_stories_handle() ) set_number_of_stories( Double.parseDouble( val ) );
		else retval = super.setAttributeAux( param_handle, val );
		
		return retval;
	}
	
	protected boolean setAttributeAux( String datamemberName, String val ) {
		boolean retval = true;
		
			
		
		if (  "number_of_stories".equals( datamemberName )  ) set_number_of_stories( Double.parseDouble( val ) );	
		else retval = super.setAttributeAux( datamemberName, val );
		
		return retval;
	}
	
	protected boolean setAttributeAux( String datamemberName, Object val ) {
		boolean retval = true;
		
		
		
		if (  "number_of_stories".equals( datamemberName )  ) set_number_of_stories( (Double)val );		
		else retval = super.setAttributeAux( datamemberName, val );
		
		return retval;
	}

	protected SuppliedAttributes createSuppliedDatamembers( boolean force ) {
		SuppliedAttributes datamembers = super.createSuppliedDatamembers( force );

	
		boolean isPublished = false;
		
		
			try {
				isPublished = _publishedAttributeHandleSet.isMember( get_number_of_stories_handle() );
			} catch ( Exception e ) {
				System.err.println( "ERROR:  ObjectRoot.F1_house_A8.createSuppliedAttributes:  could not determine if number_of_stories is published." );
				isPublished = false;
			}
			if (  isPublished && _number_of_stories.shouldBeUpdated( force )  ) {
				datamembers.add( get_number_of_stories_handle(), Double.toString( get_number_of_stories() ).getBytes() );
				_number_of_stories.setHasBeenUpdated();
			}
	
		return datamembers;
	}

	
	public void copyFrom( Object object ) {
		super.copyFrom( object );
		if ( object instanceof F1_house_A8 ) {
			F1_house_A8 data = (F1_house_A8)object;
			
			
				_number_of_stories = data._number_of_stories;
			
		}
	}
}
